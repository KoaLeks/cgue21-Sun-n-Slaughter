#version 430 core

 
layout (quads, fractional_even_spacing, ccw) in;
 
in vec4 tcPosition[];

uniform mat4 modelMatrix;
uniform mat4 viewProjMatrix;
uniform sampler2D heightMap;
uniform sampler2D normalMap;
uniform float scaleXZ;
uniform float scaleY;

out vec4 teNormal;
out vec4 tePosition;
out vec2 teTextureCoordinate;

// https://stackoverflow.com/questions/5281261/generating-a-normal-map-from-a-height-map
void main()
{
    vec4 adPosition = mix(tcPosition[0], tcPosition[3], gl_TessCoord.x);
    vec4 bcPosition = mix(tcPosition[1], tcPosition[2], gl_TessCoord.x);

    vec4 position = mix(adPosition, bcPosition, gl_TessCoord.y);

    vec2 textureCoordinate = position.xz / scaleXZ - 0.5;
    teTextureCoordinate = textureCoordinate;

    float height = texture(heightMap, textureCoordinate).r * scaleY;
    vec4 newPos = vec4(position.x, height, position.z, 1.0);
	mat4 mvp = viewProjMatrix * modelMatrix;

    // normal map texture
    // .rbg -> y and z axis are swapped
    //vec3 normal = texture(normalMap, teTextureCoordinate).rbg;
    //teNormal = normalize(normal * 2.0 - 1.0); 

    const ivec3 off = ivec3(-0.1, 0, 0.1);

    float s11 = height;
    float s01 = textureOffset(heightMap, textureCoordinate, off.xy).x;
    float s21 = textureOffset(heightMap, textureCoordinate, off.zy).x;
    float s10 = textureOffset(heightMap, textureCoordinate, off.yx).x;
    float s12 = textureOffset(heightMap, textureCoordinate, off.yz).x;
    vec3 va = normalize(vec3(2, s21-s01, 0));
    vec3 vb = normalize(vec3(0, s12-s10, -2));
    
    teNormal = vec4( cross(va,vb), s11 );
    tePosition = newPos;
    gl_Position = mvp * newPos;
}